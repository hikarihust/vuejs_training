<VirtualHost *:80>
  ServerAdmin proj_news.xyz
  DocumentRoot "C:/xampp/htdocs/vuejs"
  ServerName proj_news.xyz
  ErrorLog "logs/proj_news.xyz-error.log"
  CustomLog "logs/proj_news.xyz-access.log" common
</VirtualHost>

========================================== Cài đặt môi trường ==========================================

Cài đặt nodeJs. Khi cài đặt nodeJs thì sẽ có sẵn npm
Trước khi cài đặt thì kiểm tra xem nodeJs đã được cài đặt hay chưa bằng cách dùng câu lệnh node -v, npm -v
	trên PowerShell
Git -> Để Deploy mã nguồn lên server(sử dụng các hosting free)

========================================== Vuejs cơ bản ==========================================
Tìm hiểu về Vue Instance:
  Nghiên cứu cách tích hợp Vuejs vào trong 1 phần dự án đã tồn 
  Tích hợp Vuejs
    <script src="https://cdnjs.cloudflare.com/ajax/libs/vue/1.0.18/vue.min.js"></script>
  Vue Instance là 1 thực thể Vue hay đối tượng Vue dùng để quản lý một thành phần trong trang web
  Khi tạo 1 Instance thì cần truyền vào 1 đối tượng để khai báo các thông tin liên quan như là: Đối tượng Instance
    đó quản lý thành phần nào
  Data and Methods:
    Data: Dữ liệu giành cho thành phần mà nó quản lý
  
Ràng buộc dữ liệu một chiều với Data Binding:
  Keywords: Template Syntax
  Đối với js khi sử dụng trong Vuejs sẽ có 1 số chú ý khi viết dấu {{}} đó là chỉ sử dụng được các biểu thức đơn giản
    như cộng trừ nhân chia, toán tử 3 ngôi thay thế cho biểu thức điều kiện, hay là sủ dụng các Methods của js cung
    cấp sẵn;
    {{ number + 1 }}
    {{ ok ? 'YES' : 'NO' }}
    {{ message.split('').reverse().join('') }}
  Không sử dụng được trong các trường hợp như là khai báo biến, hay sử dụng các câu lệnh điều kiện if-else

Sử dụng v on xử lí sự kiện người dùng: Cách sử dụng và cách khai báo Event trong Vuejs

Cách sử dụng Event Modifiers:
  stop và prevent
  Có thể viết bằng Javascript thông thường, tuy nhiên thì nếu sử dụng Event Modifiers thì sẽ giảm được 1 số đoạn code 
    thường lặp đi lặp lại trong quá trình sử lý
  Khi làm ứng dụng 1 trang Single Application thì Form cần phải được xử lý riêng, khi người dùng nhấn nút submit thì
    không cho trang chuyển hướng đến trang khác mà sẽ tạm dừng ở đó, sử lý dữ liệu trực tiếp bằng js sau đó sử dụng các
    công cụ khác để tương tác với server và gửi dữ liệu sang server.
  Để khi submit form mà nó không chuyển trang đi thì ở trong js có 1 khác niệm rất quen thuộc đó là preventdefault
  stopPropagation: Ngăn chặn sự kiện của phần tử con lan tỏa ra phần tử cha
Key Modifiers: Thường sử dụng với các ô input
  Chẳng hạn như trong form có input submit, thì trong trường hợp này khi mình nhập vào form rồi nhấn Enter thì nó sẽ chạy
  Thay cho việc dùng keycode để kiểm tra nhấn nút Enter thì có thể viết:
    <input v-on:keyup.enter="submit">
  Cũng kiểm tra tương tự thì có thể kiểm tra việc nhấn 
  enter, tab, delete (captures both “Delete” and “Backspace” keys), esc, space, up, down, left, right...
Tìm hiểu về Computed:
  Đối với Template của Vuejs {{}} thì sử dụng khá thuận lợi, tuy nhiên chỉ nên dùng trong các trường hợp mà biểu thức
    của mình là đơn giản, đối với các trường hợp mà biểu thức phức tạp thì không nên đặt ở phía Template mà nên sử dụng các
    thuộc tính hay method để thực hiện các logic
  computed là 1 thuộc tính trong object truyền vào đối tượng Vue. Computed có nhiều thuộc tính bên trong mà mỗi 1 thuộc
    tính là 1 function, các function này được tính toán dựa vào các dữ liệu có sẵn
    Ở đây thì nếu dùng method thì khi gọi đến ở Template thì cần phải có lời gọi hàm đi cùng nghĩa là cần có dấu ()
  Sự khác của method so với computed đó là khi sử dụng method thì phát sinh ra vấn đề đó là sô s lượng method sẽ được run 
    không mong muốn, có nghĩa là sẽ chạy bị thừa. Nếu mà khi thao tác với dữ liệu lớn thì sẽ làm giảm tốc độ chương trình.
    Do đó trong trường hợp này sẽ sử dụng computed
    <button v-on:click="a++"> A=A+1 </button>
    <button v-on:click="b++"> B=B+1 </button>
    <p>Number + A = {{ addA() }}</p>
    <p>Number + B = {{ addB() }}</p>
  Giải thích:
    Khi sử dụng method thì trong Template sẽ dùng lời gọi hàm, khi có bất kỳ 1 sự thay đổi nào thì Vuejs nó sẽ render lại
      Template do đó khi gặp lời gọi hàm nào thì nó sẽ luôn luôn chạy hàm đó.
    Đối với computed thì tuy khai báo giống như 1 hàm tuy nhiên thì nó sẽ được lưu vào đối tượng Vue, và hàm này chỉ được
      thực thi khi mà dữ liệu trong hàm đó có sự thay đổi
  => method thì sử dụng khi tính toán dữ liệu nó không dành riêng cho data, computed được dùng dựa trên dữ liệu của đối
    tượng Vue
Ràng buộc dữ liệu 2 chiều:
  <div id="app">
      <h1>FirstName = {{ firstName }}</h1>
      <input v-on:keyup="handleKeyUp" type="text" placeholder="Nhap firstName">
  </div>
  Dàng buộc dữ liệu 2 chiều được thể hiện ở chỗ dàng buộc biến trong data của mình vào trong ô input và đồng thời ô input
    nó sẽ dàng buộc ngược lại dữ liệu của mình khi người dùng nhập vào
  Vue cung cấp 1 chỉ thị để có thể làm việc này nhanh hơn đó là v-model

Ràng buộc Class bằng VueJs:
  Một phần thường xuyên xuất hiện trong các yêu cầu khi sử dụng Javascript thuần tương tác với cấu trúc Dom đó là việc thay
    đổi Class và thay đổi Style của 1 phần tử
  Class hay Style thì bản chất nó cũng là 1 Attribute, nó là thuộc tính của phần tử Html
  Đối với 1 phần tử thì có thể có nhiều Class, Trong VueJs thì dùng 1 đối tượng để quản lý các class

Ràng buộc Style cho phần tử:
  Đối với style thì có 1 số lưu ý riêng khi tương tác với 1 số phần tử đặc biệt như:
    <div style="background-image: url('https://cdn.pixabay.com/photo/2017/03/02/08/58/background-texture-2110724__340.jpg')">

Render Template dùng biểu thức điều kiện:
  Dùng để render ra các phần tử Html nào đó theo điều kiện nhất định. Điều kiện chính là biểu thức của Javascript nó có thể theo
    biến lưu trong data hoặc biến được tính toán trong computed
  Bên cạnh việc sử dụng v-if, v-else thì có thể dùng v-show
  Khi dùng v-show thì các phần tử Html đều tồn tại trong cấu trúc DOM nó chỉ ẩn đi bằng style display:none Còn đối với v-if và v-else 
    thì nó sẽ remove luôn đi phần tử Html
Render Template dùng vòng lặp trong VueJs:
  Đối với vòng lặp để quản lý tốt được vị trí và thứ tự của các phần tử thì nên cung cấp cho VueJs 1 key để để phân biệt các phần tử 
    với nhau để phục vụ các logic như sắp xếp các phần tử, sort, filter... thì dùng đến 1 thuôc tính đó là key

Lưu ý về Loop và Condition trong VueJS: Tìm hiểu độ ưu tiên của v-for so với v-if khi sử dụng chúng chung với nhau
  Xét về độ ưu tiên thì vòng v-for có độ ưu tiên cao hơn v-if
    <div class="user" v-for="user in arrUser" v-if="user.isActive">{{ user.email }}</div>
  Đối với trường hợp này nên tạo ra 1 computed được tính toán dựa trên thông số isActive để lọc ra những user nào có trạng thái là
    active

Lưu ý quan trọng về Array và Object trong VueJs: Vấn đề quan trọng và nó thường gây ra lỗi khi ta tương tác với VueJS thông qua object
  và array
  Đối với 1 số hàm có sãn của array như: push(), pop(), shift(), unshift(), splice(), sort(), reverse()
    -> Khi sử dụng hàm này để thêm, sửa, xóa các phần tử ở trong thì hệ thống phản ứng sẽ hoạt động và render lại. Nếu không thực hiện
    bằng cách sử dụng các phương thức này mà gán theo các cách thông thường thì các giá trị thay đổi không được render lại trên view
  Muốn thực hiện thay đổi theo cách thông thường như vậy thì dùng 1 hàm có sẵn của VueJs đó là $set()
    app;
      Vue {_uid: 0, _isVue: true, $options: {…}, _renderProxy: Proxy, _self: Vue, …}
    app.arrNumber;  
      (6) [1, 2, 3, 4, 5, 6, __ob__: Observer]
    app.arrNumber.push(7);
      7
    app.arrNumber
      (7) [1, 2, 3, 4, 5, 6, 7, __ob__: Observer]
    app.arrNumber[7]
      undefined
    app.arrNumber[7]=2000;
      2000
    app.arrNumber[0]=2000;
      2000
    app.$set(app.arrNumber, 0, 3000);
      3000
  Trong trường hợp thay đổi thành 1 object mới thì ok bởi vì địa chỉ cũng thay đổi, thì lúc này hệ thống phản ứng sẽ giám sát địa chỉ đó
    app.objScore;
    {__ob__: Observer}math: 7.5__ob__: Observerdep: Dep {id: 4, subs: Array(1)}value: {__ob__: Observer}vmCount: 0__proto__: Objectget math: ƒ reactiveGetter()set math: ƒ reactiveSetter(newVal)__proto__: Object
    app.objScore.english=10;
    10
    app.objScore = {math: 7, english:8}
    {__ob__: Observer}
  Thêm 1 phần tử bằng cách dùng $set -> sẽ được hệ thống phản ứng giám sát sự thay đổi
    app.$set(app.objScore, 'physics', 8);
      8

                                =======================================================================
                                              Demo bài tập thực hành tổng hợp số 01

Phân tích data và Xử lí Price
Xử lý Change Color
  Xử lý sự kiện khi người dùng Click vào màu sắc nhất định
  Thường thì khi sử dụng vòng lặp for thì sẽ dùng đến key gắn vào cho các phần tử Html
Sử dụng v html trong Vue
  Render ra Html danh sách đặc tính của sản phẩm
  Render ra được mã nguồn Html trong 1 đoạn text

                                =======================================================================
Giới thiệu và cài đặt Vue CLI
  Cách cài đặt 1 cấu trúc thư mục cơ bản để xây dựng 1 dự án theo mô hình Single Page Application
  Dùng để xây dựng nhanh 1 cấu trúc thư mục để quản lý mã nguồn
  CLI: Command Line Interface
  Keywords: vuejs Template webpack -> https://github.com/vuejs-templates/webpack
  Để chạy các câu lệnh để có thể cài đặt thì cần phải đảm bảo đã cài đặt nodeJs và npm
    $ npm install -g vue-cli: -g là chữ viết tắt của global, cài đặt vue-cli ở trong tầm vực global, mình ó thể sử 
      dụng nó ở bất kỳ nơi nào trong máy tính để tạo ra 1 cấu truc thư mục mẫu
    $ vue init webpack my-project: my-project chính là tên của dự án
      $ vue init webpack-simple helloVueJs
      ? Project name (helloVueJs) hello
      ? Project name hello
      ? Project description (A Vue.js project)
      ? Project description A Vue.js project
      ? Author (vudinhquang <vudinhquangk53@gmail.com>)
      ? Author vudinhquang <vudinhquangk53@gmail.com>
      ? License (MIT)
      ? License MIT
      ? Use sass? (y/N) n
      ? Use sass? No
        vue-cli · Generated "helloVueJs".
        To get started:
          cd helloVueJs
          npm install
            Cài đặt các thư viện khác mà nó sử dụng trong VueJS. Coi trong package.json, nó khai báo 
              tất cả các thư viện phụ thuộc vào bên ngoài
            Sau khi chạy câu lệnh này xong thì trong thư mục của mình có thêm thư mục là node_modules trong đó
              chứa tất cả các thư viện mà chúng ta có sử dụng
          npm run dev
            Câu lệnh này sẽ sinh ra 1 server ảo: http://localhost:8081/
    $ cd my-project
    $ npm install
    $ npm run dev
Cấu trúc Project, tìm hiểu Webpack và Babel
  Tìm hiểu về 1 số thành phần được tạo ra sau khi cài đặt cấu trúc thư mục
    package.json: Là nơi khai báo các thư viện, module ở bên ngoài mà mình sử dụng trong project
  Có 2 môi trường:
    Development: Là môi trường dành cho lập trình viên
      "devDependencies": {
        "babel-core": "^6.26.0",
        "babel-loader": "^7.1.2",
        "babel-preset-env": "^1.6.0",
        "babel-preset-stage-3": "^6.24.1",
        "cross-env": "^5.0.5",
        "css-loader": "^0.28.7",
        "file-loader": "^1.1.4",
        "vue-loader": "^13.0.5",
        "vue-template-compiler": "^2.4.4",
        "webpack": "^3.6.0",
        "webpack-dev-server": "^2.9.1"
      }
      -> Dùng trong quá trình lập trình
        Babel là 1 trình biên dịch của Javascript
        ES6:
          let name = 'join';
          const age = 28;
          let str = `My name is ${name}`;
          class Person {
            constructor(name = '', age = 28) {
              this.name = name;
              this.age = age;
            }
          }
          var arr1 = [1, 2, 3];
          var arr2 = ['abc', 'def'];
          arr = [...arr1, ...arr2];
    Production: Public ra cho user sử dụng
      "dependencies": {
        "vue": "^2.5.11"
      }
      -> Dùng xuyên suốt trong quá trình user dùng trang web của mình
  Webpack: Công cụ giúp đóng gói code, đóng gói mã nguồn
    Khi đẩy code ở dạng môi trường Production thì sẽ build ra bằng câu lệnh: npm run build lúc này sẽ sinh ra 1 
      thư mục nữa chính là thư mục chứa file Javascript cuối cùng đã được đóng gói. Để đóng gói được thì cần phải có
      webpack
    Lệnh: $ npm run build